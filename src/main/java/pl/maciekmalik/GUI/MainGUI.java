package pl.maciekmalik.GUI;

import pl.maciekmalik.App;
import pl.maciekmalik.Model;
import pl.maciekmalik.ModelObject;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Główne okno programu, zakładka tworzenia/przeglądania modelu(danych wzorcowych)
 * i dodawania nowych obiektów do klasyfikacji
 */
public class MainGUI extends JFrame {

    //Max rozmiary ikon dla obiektóœ
    public static int MAXWIDTHICON = 200;
    public static int MAXHEIGHTICON = 200;

    /**
     * Creates new form MainGUI
     * Inicjalizacja elementów okna
     */
    public MainGUI() {
        initComponents();
        jLabel8.setText("v12.7 Maciek Malik 2020");
        _setTitle();
        Path currentRelativePath = Paths.get("");
        String s = currentRelativePath.toAbsolutePath().toString();
        System.out.println("Current relative path is: " + s);
        JLabel p = new JLabel(new ImageIcon());
        jPObjPreview.setLayout(new BorderLayout());
        jPObjPreview.add(p,BorderLayout.NORTH);
        App.model.setXType( jCXType.getSelectedIndex());
        App.model.setXType( jCYType.getSelectedIndex());
        App.model.setSelectedMetrics( jCMetrics.getSelectedIndex());
        App.model.setSelectedMetricsName((String) jCMetrics.getSelectedItem());
        App.model.setK( (jCKValue.getSelectedIndex()+1));

        _autoLoadObjects();

        jPChart.setLayout(new BorderLayout());
        jPChart.add(DataDisplay.generateChart(),BorderLayout.NORTH);
        jPChart.setVisible(true);
        jPClass.revalidate();
        this.populateList();
        jLObjList.setSelectedIndex(0);
        jLObjList1.setSelectedIndex(0);
        _checkEnableDelete();
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * Kod wyglądu okna - automatycznie generowany
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jButton1 = new javax.swing.JButton();
        jMenuItem1 = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPModel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLObjList = new javax.swing.JList<>();
        jTUpperInfo = new javax.swing.JTextField();
        jBAddObject = new javax.swing.JButton();
        jPObjPreview = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTMoments = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jCXType = new javax.swing.JComboBox<>();
        jCYType = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLClass = new javax.swing.JLabel();
        jBDelete = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPClass = new javax.swing.JPanel();
        jTUpperInfo1 = new javax.swing.JTextField();
        jBAddObject1 = new javax.swing.JButton();
        jPObjPreview1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTMoments1 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLClass1 = new javax.swing.JLabel();
        jPChart = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jCKValue = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jCMetrics = new javax.swing.JComboBox<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTMetrics = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jLObjList1 = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jBDelete1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMNew = new javax.swing.JMenuItem();
        jMLoadModel = new javax.swing.JMenuItem();
        jMSaveModel = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMExit = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMModel = new javax.swing.JMenuItem();
        jMClass = new javax.swing.JMenuItem();
        jMAbout = new javax.swing.JMenu();

        jMenu1.setText("jMenu1");

        jButton1.setText("jButton1");

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("k-NN v0.1 | Model: {name}");

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jLObjList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jLObjList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jLObjList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jLObjListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jLObjList);

        jTUpperInfo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTUpperInfo.setText("Wybierz obiekt z listy na lewo");
        jTUpperInfo.setFocusable(false);

        jBAddObject.setText("+ Dodaj obiekt");
        jBAddObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAddObjectActionPerformed(evt);
            }
        });

        jPObjPreview.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPObjPreview.setMaximumSize(new java.awt.Dimension(150, 150));

        javax.swing.GroupLayout jPObjPreviewLayout = new javax.swing.GroupLayout(jPObjPreview);
        jPObjPreview.setLayout(jPObjPreviewLayout);
        jPObjPreviewLayout.setHorizontalGroup(
                jPObjPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );
        jPObjPreviewLayout.setVerticalGroup(
                jPObjPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );

        jTMoments.setEditable(false);
        jTMoments.setColumns(20);
        jTMoments.setRows(5);
        jScrollPane2.setViewportView(jTMoments);

        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("Klasyfikuj na podstawie:");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jCXType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dodaj Obiekty", "---", "---" }));
        jCXType.setEnabled(false);
        jCXType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCXTypeActionPerformed(evt);
            }
        });

        jCYType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dodaj Obiekty", "---", "---" }));
        jCYType.setEnabled(false);
        jCYType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCYTypeActionPerformed(evt);
            }
        });

        jLabel1.setText("Oś X:");

        jLabel2.setText("Oś Y:");

        jLabel4.setText("Klasa:");

        jLClass.setText("KWADRAT");

        jBDelete.setText("Usuń");
        jBDelete.setEnabled(false);
        jBDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPModelLayout = new javax.swing.GroupLayout(jPModel);
        jPModel.setLayout(jPModelLayout);
        jPModelLayout.setHorizontalGroup(
                jPModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPModelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jBDelete))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTUpperInfo)
                                        .addComponent(jTextField1)
                                        .addGroup(jPModelLayout.createSequentialGroup()
                                                .addGroup(jPModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPModelLayout.createSequentialGroup()
                                                                .addComponent(jLabel1)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jCXType, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPModelLayout.createSequentialGroup()
                                                                .addComponent(jLabel2)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jCYType, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(jBAddObject, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(jPModelLayout.createSequentialGroup()
                                                                .addComponent(jPObjPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(jPModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addGroup(jPModelLayout.createSequentialGroup()
                                                                                .addComponent(jLabel4)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(jLClass, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addComponent(jScrollPane2))))
                                                .addGap(0, 441, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        jPModelLayout.setVerticalGroup(
                jPModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPModelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPModelLayout.createSequentialGroup()
                                                .addComponent(jBAddObject)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTUpperInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jPObjPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel4)
                                                        .addComponent(jLClass))
                                                .addGap(18, 18, 18)
                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addGroup(jPModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel1)
                                                        .addComponent(jCXType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel2)
                                                        .addComponent(jCYType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(0, 99, Short.MAX_VALUE))
                                        .addComponent(jScrollPane1))
                                .addGap(18, 18, 18)
                                .addComponent(jBDelete)
                                .addGap(117, 117, 117))
        );

        jTabbedPane1.addTab("Model", jPModel);

        jTUpperInfo1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTUpperInfo1.setText("Wybierz obiekt z listy na lewo/Statystyki dla obiektu: aaa111.jpg");
        jTUpperInfo1.setFocusable(false);

        jBAddObject1.setText("+ Dodaj obiekt");
        jBAddObject1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAddObject1ActionPerformed(evt);
            }
        });

        jPObjPreview1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPObjPreview1.setMaximumSize(new java.awt.Dimension(150, 150));

        javax.swing.GroupLayout jPObjPreview1Layout = new javax.swing.GroupLayout(jPObjPreview1);
        jPObjPreview1.setLayout(jPObjPreview1Layout);
        jPObjPreview1Layout.setHorizontalGroup(
                jPObjPreview1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );
        jPObjPreview1Layout.setVerticalGroup(
                jPObjPreview1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE)
        );

        jTMoments1.setEditable(false);
        jTMoments1.setColumns(20);
        jTMoments1.setRows(5);
        jTMoments1.setText("---");
        jScrollPane5.setViewportView(jTMoments1);

        jLabel5.setText("Nowa Klasa:");

        jLClass1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLClass1.setText("KWADRAT");

        jPChart.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPChartLayout = new javax.swing.GroupLayout(jPChart);
        jPChart.setLayout(jPChartLayout);
        jPChartLayout.setHorizontalGroup(
                jPChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        jPChartLayout.setVerticalGroup(
                jPChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel6.setText("liczba K:");

        jCKValue.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1-NN", "2-NN", "3-NN", "4-NN", "5-NN", "6-NN" }));
        jCKValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCKValueActionPerformed(evt);
            }
        });

        jLabel7.setText("Metryka:");

        jCMetrics.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Euclides", "Chebyshev" }));
        jCMetrics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCMetricsActionPerformed(evt);
            }
        });

        jTMetrics.setEditable(false);
        jScrollPane7.setViewportView(jTMetrics);

        javax.swing.GroupLayout jPClassLayout = new javax.swing.GroupLayout(jPClass);
        jPClass.setLayout(jPClassLayout);
        jPClassLayout.setHorizontalGroup(
                jPClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPClassLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTUpperInfo1)
                                        .addGroup(jPClassLayout.createSequentialGroup()
                                                .addComponent(jPObjPreview1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane7))
                                        .addGroup(jPClassLayout.createSequentialGroup()
                                                .addGroup(jPClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPClassLayout.createSequentialGroup()
                                                                .addComponent(jBAddObject1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jCKValue, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jLabel7)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jCMetrics, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPClassLayout.createSequentialGroup()
                                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLClass1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(0, 171, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        jPClassLayout.setVerticalGroup(
                jPClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPClassLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jBAddObject1)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jCKValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7)
                                        .addComponent(jCMetrics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTUpperInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPClassLayout.createSequentialGroup()
                                                .addGroup(jPClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jPObjPreview1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
                                                .addGap(21, 21, 21))
                                        .addComponent(jScrollPane7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(jLClass1))
                                .addGap(18, 18, 18)
                                .addComponent(jPChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        jLObjList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jLObjList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jLObjList1ValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(jLObjList1);

        jLabel3.setText("Lista obiektów");

        jBDelete1.setText("Usuń");
        jBDelete1.setEnabled(false);
        jBDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDelete1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jBDelete1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPClass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBDelete1)
                                .addGap(0, 65, Short.MAX_VALUE))
                        .addComponent(jPClass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Klasyfikacja", jPanel2);

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 153, 153));
        jLabel8.setText("v0.5 Maciek Malik 2020");

        jMenu2.setText("Plik");

        jMNew.setText("Nowy");
        jMNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMNewActionPerformed(evt);
            }
        });
        jMenu2.add(jMNew);

        jMLoadModel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMLoadModel.setText("Wczytaj model");
        jMLoadModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMLoadModelActionPerformed(evt);
            }
        });
        jMenu2.add(jMLoadModel);

        jMSaveModel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMSaveModel.setText("Zapisz model");
        jMSaveModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMSaveModelActionPerformed(evt);
            }
        });
        jMenu2.add(jMSaveModel);
        jMenu2.add(jSeparator1);

        jMExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMExit.setText("Wyjście");
        jMExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMExitActionPerformed(evt);
            }
        });
        jMenu2.add(jMExit);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Widok");

        jMModel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMModel.setText("Model/Zbiór uczący");
        jMModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMModelActionPerformed(evt);
            }
        });
        jMenu4.add(jMModel);

        jMClass.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMClass.setText("Klasyfikacja obiektów");
        jMClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMClassActionPerformed(evt);
            }
        });
        jMenu4.add(jMClass);

        jMenuBar1.add(jMenu4);

        jMAbout.setText("O Programie");
        jMAbout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMAboutMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMAbout);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTabbedPane1)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jTabbedPane1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8))
        );

        pack();
    }// </editor-fold>
    // </editor-fold>

    /**
     * Ustawia tytuł okna,
     * Jeżeli model został wczytany z pliku, dodaje jego nazwę
     */
    private void _setTitle(){
        String f = App.model.modelFileName;
        if(f.equals("")){
            this.setTitle("k-NN v12.7");
        }else{
            this.setTitle("k-NN v12.7 | Model: "+f);
        }
    }

    /**
     * Automatycznie ładuje pliki do modelu z folderu Images/Autoload
     */
    private void _autoLoadObjects(){
        try (Stream<Path> walk = Files.walk(Paths.get("Images/Autoload"))) {

            List<String> result = walk.filter(Files::isRegularFile)
                    .map(x -> x.toString()).collect(Collectors.toList());

            result.forEach((r)->{
                String[] name = r.split("[0-9]")[0].split("[\\\\,/]");
                App.model.addObject(r,false,name[name.length-1]);
            });

            if(!App.model.getAllObjects().isEmpty()){
                jCXType.setModel(App.model.getObject("").getPropertiesModel());
                jCYType.setModel(App.model.getObject("").getPropertiesModel());
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Zmiana cechy która będzie wyświetlana na osi X
     * @param evt
     */
    private void jCXTypeActionPerformed(java.awt.event.ActionEvent evt) {
        if(!updateCB) return;
        App.model.setXType( jCXType.getSelectedIndex());
        //App.model.setYType( jCYType.getSelectedIndex());
        App.model.setXTypeName(jCXType.getSelectedItem().toString());
        //App.model.setYTypeName(jCYType.getSelectedItem().toString());
        this.updateChart();
    }

    /**
     * Zmiana cechy która będzie wyświetlana na osi Y
     * @param evt
     */
    private void jCYTypeActionPerformed(java.awt.event.ActionEvent evt) {
        if(!updateCB) return;
        //App.model.setXType( jCXType.getSelectedIndex());
        App.model.setYType( jCYType.getSelectedIndex());
        //App.model.setXTypeName(jCXType.getSelectedItem().toString());
        App.model.setYTypeName(jCYType.getSelectedItem().toString());
        this.updateChart();
    }

    /**
     * Przełączanie sie pomiędzy Modelem a klasyfikacja obiektów,
     * Przejscie na klasyfikacje powoduje ponowne przelicznenie momentów obiektów
     * @param evt
     */
    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {
        if(jTabbedPane1.getSelectedIndex() == 1){
            if(jLObjList1.getSelectedIndex() != -1){
                App.model.getObject(shortToFullName.get(jLObjList1.getSelectedValue())).calculateMetric();
                _findNewClass();
            }
        }
        jPChart.revalidate();
    }

    /**
     * Aktualizacja wykresu na podstawie nowych danych
     */
    public void updateChart(){
        jPChart.removeAll();
        jPChart.add(DataDisplay.generateChart(),BorderLayout.NORTH);
        jPChart.revalidate();
    }


    /**
     * Wybór któregoś obiektu na liście (w modelu)
     * @param evt
     */
    private void jLObjListValueChanged(javax.swing.event.ListSelectionEvent evt) {
        //DefaultListModel lsm = (DefaultListModel)evt.getSource();
        _checkEnableDelete();
        if(jLObjList.getSelectedIndex() != -1){
            jTUpperInfo.setText("Statystyki dla obiektu: "+ jLObjList.getSelectedValue());
            JLabel p = new JLabel(new ImageIcon());
            jPObjPreview.removeAll();
            jPObjPreview.setLayout(new BorderLayout());
            jPObjPreview.add(p,BorderLayout.NORTH);
            jLClass.setText(App.model.getObject(shortToFullName.get(jLObjList.getSelectedValue())).getClassName());
            p.setIcon(App.model.getObject(shortToFullName.get(jLObjList.getSelectedValue())).getIcon());
            _printStats(jLObjList,jTMoments);
        }else{
            jTUpperInfo.setText("Wybierz obiekt z listy na lewo");
            jTMoments.setText("");
        }
    }

    /**
     * Wybór obiektu na liście obiektów do klasyfikacji
     * @param evt
     */
    private void jLObjList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {
        _checkEnableDelete();
        if(jLObjList1.getSelectedIndex() != -1){
            jTUpperInfo1.setText("Statystyki dla obiektu: "+ jLObjList1.getSelectedValue());
            JLabel p = new JLabel(new ImageIcon());
            jPObjPreview1.removeAll();
            jPObjPreview1.setLayout(new BorderLayout());
            jPObjPreview1.add(p,BorderLayout.NORTH);
            ModelObject selObject = App.model.getObject(shortToFullName.get(jLObjList1.getSelectedValue()));
            p.setIcon(selObject.getIcon());
            _printStats(jLObjList1,jTMoments1);
            App.model.getObject(shortToFullName.get(jLObjList1.getSelectedValue())).calculateMetric();
            _findNewClass();
        }else{
            jTUpperInfo1.setText("Wybierz obiekt z listy na lewo");
            jTMoments1.setText("");
            jTMetrics.setText("");
            jLClass1.setText("");
        }
    }

    /**
     * Wypisuje wszystkie wartości metryk względem innych obiektów i próbuje znaleść odpowiednią klasę
     * do nowego obiektu
     */
    private void _findNewClass(){
        if(App.model.getModelOnlyObjects().size() >= App.model.getK()){
            ModelObject selObject = App.model.getObject(shortToFullName.get(jLObjList1.getSelectedValue()));
            SortedSet<Double> nei = new TreeSet<>();
            StringBuilder sb2 = new StringBuilder();
            StringBuilder sb1 = new StringBuilder();
            sb2.append("\n\n ------ Wszystkie ------ <br>\n");
            for (String key:selObject.getMetrics().keySet()) {
                Double tmp = selObject.getMetrics().get(key);
                nei.add(tmp);
                sb2.append(tmp+"<br>");
            }
            int c = App.model.getK();
            int cc = 0;

            Iterator it = nei.iterator();
            List<String> names = new ArrayList<>();
            //Wyświetlanie tylko top K pozycji
            while(cc<c && it.hasNext()){
                String n = String.format("%.3f", it.next());
                String name = selObject.getReverseMetrics().get(n);
                names.add(name);
                sb1.append("<b>["+name.substring(name.lastIndexOf("/")+1)+"]["+App.model.getObject(name).getClassName()+"]"+n+"<br></b>");
                ++cc;
            }
            jLClass1.setForeground(new Color(36, 36, 36));
            jLClass1.setText(App.model.getObject(mostCommon(names)).getClassName());
            jTMetrics.setContentType("text/html");
            jTMetrics.setText(sb1.toString()+sb2.toString());
        }else{
            //Za mało sąsiadów
            jLClass1.setForeground(new Color(165, 141, 54));
            jLClass1.setText("Za mało sąsiadów w modelu");
        }
    }

    /**
     * Wyszukiwanie najczęsciej występującego obiektu na liście,
     * Uzywane do ustalenia nowej klasy na podstawie K sąsiadów
     * @param list
     * @param <T>
     * @return
     */
    public static <T> T mostCommon(List<T> list) {
        Map<T, Integer> map = new HashMap<>();

        for (T t : list) {
            Integer val = map.get(t);
            map.put(t, val == null ? 1 : val + 1);
        }

        Map.Entry<T, Integer> max = null;

        for (Map.Entry<T, Integer> e : map.entrySet()) {
            if (max == null || e.getValue() > max.getValue())
                max = e;
        }

        return max.getKey();
    }


    /**
     * Wyświetlanie właściwości obiektu w polu tekstowym
     * @param source
     * @param target
     */
    private void _printStats(JList source,JTextArea target){
        target.setText("");
        Map<String, Double> p = App.model.getObject(shortToFullName.get(source.getSelectedValue())).getProperties();
        for (String m: p.keySet()) {
            target.append(m+": "+String.valueOf(p.get(m))+System.lineSeparator());
        }
    }

    /**
     * Mapa nazwy pliku do pełnej ścieżki + nazwy pliku
     */
    private Map<String,String> shortToFullName = new HashMap<>();

    /**
     * Wypełnienie listy obiektów
     */
    public void populateList(){
        DefaultListModel listM = new DefaultListModel();//Lista obiektów dla modelu
        DefaultListModel listO = new DefaultListModel();//Lista obiektów do klasyfikacji
        for (String fileName:App.model.getAllObjects().keySet()) {
            String fN = fileName.substring(fileName.lastIndexOf("/") + 1);
            shortToFullName.put(fN,fileName);
            if(App.model.getObject(fileName).getType()){
                listO.addElement(fN);
            }else{
                listM.addElement(fN);
            }
        }
        jLObjList.removeAll();
        jLObjList1.removeAll();
        jLObjList.setModel(listM);
        jLObjList1.setModel(listO);
        jLObjList1.revalidate();
        jLObjList.revalidate();
        jPClass.revalidate();

    }

    private short num = 5;

    /**
     * Dodawanie obiektów do klasyfikacji
     * @param evt
     */
    private void jBAddObject1ActionPerformed(java.awt.event.ActionEvent evt) {

        new NewObject(true,this).setVisible(true);

    }

    private boolean updateCB = true;

    /**
     * Wczytywanie modelu z pliku
     * @param evt -
     */
    private void jMLoadModelActionPerformed(java.awt.event.ActionEvent evt) {
        Path currentRelativePath = Paths.get("");
        String s = currentRelativePath.toAbsolutePath().toString();
        final JFileChooser fc = new JFileChooser(s);
        File file;
        updateCB = false;
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            System.out.println("Opening: "+file.getName());
            try{
                App.model = (Model) Model.ReadModelFromFile(file.getPath());
            }catch(Exception e){
                e.printStackTrace();
            }
            if(App.model == null){
                JOptionPane.showMessageDialog(new JFrame(),
                        "Błąd przy otwieraniu pliku",
                        "File Error",
                        JOptionPane.ERROR_MESSAGE);
                App.model = new Model();
                JLabel p = new JLabel(new ImageIcon());
                jPObjPreview1.removeAll();
                jPObjPreview1.setLayout(new BorderLayout());
                jPObjPreview1.add(p,BorderLayout.NORTH);
                jPObjPreview.removeAll();
                jPObjPreview.setLayout(new BorderLayout());
                jPObjPreview.add(p,BorderLayout.NORTH);
                p.setIcon(new ImageIcon());
                _setTitle();
                populateList();
                updateChart();
                updateCB = true;
            }else{

                //Ładowanie ustawień z pliku
                if(App.model.getAllObjects().size() > 0){
                    //Ustawienie możliwych cech obiektów do wyboru
                    jCXType.setModel(App.model.getObject("").getPropertiesModel());
                    jCYType.setModel(App.model.getObject("").getPropertiesModel());


                    jCMetrics.setSelectedIndex(App.model.getSelectedMetrics());
                    jCKValue.setSelectedIndex(App.model.getK()-1);

                    //Wypełnienie listy obiektami wczytanymi z pliku
                    populateList();
                    jLObjList.setSelectedIndex(0);
                    jLObjList1.setSelectedIndex(0);
                }

                _setTitle();
                updateChart();
                updateCB = true;
                this.revalidate();
            }

        } else {
        }
    }

    /**
     * Zapisywanie modelu do pliku
     * @param evt -
     */
    private void jMSaveModelActionPerformed(java.awt.event.ActionEvent evt) {
        Path currentRelativePath = Paths.get("");
        String s = currentRelativePath.toAbsolutePath().toString();
        final JFileChooser fc = new JFileChooser(s);
        File file;
        int returnVal = fc.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            System.out.println("Saving to: "+file.getName());
            Model.WriteModelToFile(App.model,file.getName()+".malm");
            JOptionPane.showMessageDialog(new JFrame(),
                    "Plik zapisany",
                    "",
                    JOptionPane.INFORMATION_MESSAGE);
            _setTitle();
            populateList();
            updateChart();

        } else {
        }
    }

    /**
     * Naciśnięcie przycisku wyjścia
     * @param evt
     */
    private void jMExitActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(1);
    }

    /**
     * Wyświetlenie okna opisującego program
     * @param evt
     */
    private void jMAboutMouseClicked(java.awt.event.MouseEvent evt) {
        System.out.println("About");
        JFrame aboutWindow = new JFrame("O Programie");
        aboutWindow.setPreferredSize(new Dimension(300,300));
        aboutWindow.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        aboutWindow.setLayout(new BorderLayout());
        JTextArea ta = new JTextArea();
        ta.setEditable(false);
        aboutWindow.add(ta,BorderLayout.NORTH);
        ta.setText("Metoda K-NN APO 2020 \n" +
                    "By: Maciek Malik \n"+
                    "v12.7");
        aboutWindow.pack();
        aboutWindow.setVisible(true);
    }

    /**
     * Przełączenie na widok klasyfikacji obiektów
     * @param evt
     */
    private void jMClassActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPane1.setSelectedIndex(1);
    }

    /**
     * Przełączenie na zakładkę "Model"
     * @param evt
     */
    private void jMModelActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPane1.setSelectedIndex(0);
    }

    /**
     * Zmiana wartości K z listy,
     * powoduje ponowny render wykresu
     * @see
     * @param evt
     */
    private void jCKValueActionPerformed(java.awt.event.ActionEvent evt) {
        if(!updateCB) return;
        App.model.setK(jCKValue.getSelectedIndex()+1);
        App.model.getObject(shortToFullName.get(jLObjList1.getSelectedValue())).calculateMetric();
        _findNewClass();
    }

    /**
     * Zmiana liczonej metryki
     * @param evt
     */
    private void jCMetricsActionPerformed(java.awt.event.ActionEvent evt) {
        if(!updateCB) return;
        App.model.setSelectedMetricsName((String) jCMetrics.getSelectedItem());
        App.model.setSelectedMetrics(jCMetrics.getSelectedIndex());
        App.model.getObject(shortToFullName.get(jLObjList1.getSelectedValue())).calculateMetric();
        _findNewClass();
    }

    /**
     * Tworzy nowy model, resetuje wygląd głównego okna programu
     * @see Model
     * @param evt
     */
    private void jMNewActionPerformed(java.awt.event.ActionEvent evt) {
        App.model = new Model();
        JLabel p = new JLabel(new ImageIcon());
        jPObjPreview1.removeAll();
        jPObjPreview1.setLayout(new BorderLayout());
        jPObjPreview1.add(p,BorderLayout.NORTH);
        jPObjPreview.removeAll();
        jPObjPreview.setLayout(new BorderLayout());
        jPObjPreview.add(p,BorderLayout.NORTH);
        p.setIcon(new ImageIcon());
        _setTitle();
        populateList();
        updateChart();
    }

    /**
     * Sprawdza możliwość usuwania z listy obiektów
     */
    private void _checkEnableDelete(){
        boolean enableM = true;
        boolean enableC = true;
        if(jLObjList.isSelectionEmpty()){
            enableM  = false;
        }
        if(jLObjList.getModel().getSize() <= 0){
            enableM  = false;
        }

        if(jLObjList1.isSelectionEmpty()){
            enableC  = false;
        }
        if(jLObjList1.getModel().getSize() <= 0){
            enableC  = false;
        }

        if(!App.model.getAllObjects().isEmpty()){
            jCXType.setEnabled(true);
            jCYType.setEnabled(true);
        }else{
            jCXType.setEnabled(false);
            jCYType.setEnabled(false);
        }

        jBDelete.setEnabled(enableM);
        jBDelete1.setEnabled(enableC);
    }

    /**
     * Usuwanie obiektów z modelu
     * @see Model#removeObject(java.lang.String)
     * @param evt -
     */
    private void jBDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        App.model.removeObject(shortToFullName.get(jLObjList.getSelectedValue()));
        this.updateChart();
        this.populateList();
        jLObjList.setSelectedIndex(0);
        _checkEnableDelete();
    }

    /**
     * Usuwanie klasyfikowanych obiektów z listy
     * @see Model#removeObject(java.lang.String)
     * @param evt -
     */
    private void jBDelete1ActionPerformed(java.awt.event.ActionEvent evt) {
        App.model.removeObject(shortToFullName.get(jLObjList1.getSelectedValue()));
        this.updateChart();
        this.populateList();
        jLObjList1.setSelectedIndex(0);
        _checkEnableDelete();
    }

    //Gettery-----------------------------------------------
    public JPanel getjPChart() {
        return jPChart;
    }

    public JPanel getjPClass() {
        return jPClass;
    }

    public JPanel getjPanel2() {
        return jPanel2;
    }

    public JComboBox<String> getjCXType() {
        return jCXType;
    }

    public JComboBox<String> getjCYType() {
        return jCYType;
    }

    public JList<String> getjLObjList() {
        return jLObjList;
    }

    public JList<String> getjLObjList1() {
        return jLObjList1;
    }
    //--------------------------------------------------------

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }


    /**
     * Dodawanie nowego obiektu jako dane modelu
     * @param evt
     */
    private void jBAddObjectActionPerformed(java.awt.event.ActionEvent evt) {

        new NewObject(false,this).setVisible(true);

    }

    //Automatycznie generowane zmienne do wcześniej generowanego wyglądu okna
    // Variables declaration - do not modify
    private javax.swing.JButton jBAddObject;
    private javax.swing.JButton jBAddObject1;
    private javax.swing.JButton jBDelete;
    private javax.swing.JButton jBDelete1;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jCKValue;
    private javax.swing.JComboBox<String> jCMetrics;
    private javax.swing.JComboBox<String> jCXType;
    private javax.swing.JComboBox<String> jCYType;
    private javax.swing.JLabel jLClass;
    private javax.swing.JLabel jLClass1;
    private javax.swing.JList<String> jLObjList;
    private javax.swing.JList<String> jLObjList1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMAbout;
    private javax.swing.JMenuItem jMClass;
    private javax.swing.JMenuItem jMExit;
    private javax.swing.JMenuItem jMLoadModel;
    private javax.swing.JMenuItem jMModel;
    private javax.swing.JMenuItem jMNew;
    private javax.swing.JMenuItem jMSaveModel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPChart;
    private javax.swing.JPanel jPClass;
    private javax.swing.JPanel jPModel;
    private javax.swing.JPanel jPObjPreview;
    private javax.swing.JPanel jPObjPreview1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextArea jTBasicStats;
    private javax.swing.JTextPane jTMetrics;
    private javax.swing.JTextArea jTMoments;
    private javax.swing.JTextArea jTMoments1;
    private javax.swing.JTextField jTUpperInfo;
    private javax.swing.JTextField jTUpperInfo1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration



}
